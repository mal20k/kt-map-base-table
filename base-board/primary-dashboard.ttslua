
objective = "PrimaryCard"
selected = "Selected"
scoreboardTag = "Kill Team Scoreboard"
dashboardTag = "Kill Team Dashboard"
playerName = nil
myColor = nil
missionType = nil

selections = {
  ['Primary'] = {
    tag = 'PrimaryCard',
    callback = 'comSetSelectedPrimaryOp',
    announcement = ' selected a Primary Op'
  },
  ['Tac Op'] = {
    tag = 'TacOp',
    callback = 'comSetSelectedTacOp',
    announcement = ' selected a Tac Op'
  }
}

function selectMissionCard(card)
  local points = self.getSnapPoints()
  local npoints = #points
  local op = selections[missionType]
  if npoints == 0 then return end
  local selectedTag = selected .. ' ' .. op.tag
  if not card.hasTag(selectedTag) then
    broadcastToAll(playerName .. op.announcement, Color.fromString(myColor))
    card.addTag(selectedTag)
    card.setVelocity(Vector(0,0,0))
    card.setAngularVelocity(Vector(0,0,0))
    local cpos = card.getPosition()
    local snap = 1
    local tpos = self.positionToWorld(points[snap].position)

    if tpos then
      card.setPosition(tpos)
      local rotation = self.getRotation()
      card.setRotation(Vector(rotation.x + 180, rotation.y + 180, rotation.z))
      card.locked = true
    end
    
    table.remove(points, snap)
    self.setSnapPoints(points)

    for _,o in pairs(getObjectsWithTag(scoreboardTag)) do
      o.call(op.callback,{
        player=myColor,
        guid=card.getGUID()
      })
    end
    local ref = card.clone()
    Wait.frames(function()
      broadcastToColor('A copy of ' .. ref.getName() .. ' has been sent to your hand for reference', myColor)
      ref.deal(1, myColor)
    end, 1)
  end
end

function onCollisionEnter(info)
  local op = selections[missionType]
  if Player[myColor].seated then
    local o = info.collision_object
    if o.hasTag(op.tag) then
        selectMissionCard(o)
    end
  end
end

function refreshPlayerName()
  if Player[myColor].seated then
    playerName = Player[myColor].steam_name
  else
    playerName = myColor
  end
end

function loadGM()
  local gmn = self.getGMNotes()
  local data = json.parse(gmn)
  myColor = data.player
  missionType = data.type
  refreshPlayerName()
end


function onPlayerChangeColor(pc)
  loadGM()
end

function onPlayerDisconnect(pc)
  loadGM()
end

function onLoad(state)
  self.setTags({dashboardTag})
  loadGM()
end
